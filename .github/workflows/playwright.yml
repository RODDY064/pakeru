name: Playwright + Vercel Gated Deploy

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main, master]

jobs:
  deploy_preview:
    name: Deploy Preview to Vercel
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.vercel.outputs.preview-url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build Project
        run: pnpm build
      
      - name: Deploy to Vercel Preview
        id: vercel
        run: |
          npm i -g vercel@latest
          
          mkdir -p .vercel
          echo "{\"orgId\":\"${{ secrets.VERCEL_ORG_ID }}\",\"projectId\":\"${{ secrets.VERCEL_PROJECT_ID }}\"}" > .vercel/project.json
          
          echo "Starting deployment..."
          DEPLOYMENT_URL=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --yes)
          echo "preview-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployment initiated: $DEPLOYMENT_URL"
          
          echo "Waiting for Vercel deployment to complete..."
          vercel inspect $DEPLOYMENT_URL --token=${{ secrets.VERCEL_TOKEN }} --wait

  playwright_test:
    name: Run Playwright Tests
    needs: deploy_preview
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      PLAYWRIGHT_BASE_URL: ${{ needs.deploy_preview.outputs.preview_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      
      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps
      
      - name: Wait for Preview Deployment
        run: |
          echo "Waiting for $PLAYWRIGHT_BASE_URL to respond..."
          sleep 30
          
          for i in {1..40}; do
            echo "Checking deployment status... ($i/40)"
            
            if curl -fsS --connect-timeout 15 --max-time 45 "$PLAYWRIGHT_BASE_URL" >/dev/null 2>&1; then
              echo "✅ Preview is live and responding!"
              exit 0
            fi
            
            HTTP_CODE=$(curl -o /dev/null -s -w "%{http_code}" --connect-timeout 15 --max-time 45 "$PLAYWRIGHT_BASE_URL" || echo "000")
            if [ "$HTTP_CODE" != "000" ] && [ "$HTTP_CODE" != "" ]; then
              echo "✅ Preview is live! (HTTP $HTTP_CODE)"
              exit 0
            fi
            
            echo "Not ready yet... (HTTP: $HTTP_CODE)"
            
            if [ $i -lt 10 ]; then
              sleep 15
            else
              sleep 30
            fi
          done
          
          echo "❌ Preview never became ready after 20+ minutes."
          echo "URL: $PLAYWRIGHT_BASE_URL"
          exit 1
      
      - name: Run Playwright Tests
        run: pnpm exec playwright test
      
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy_prod:
    name: Deploy to Production
    needs: [playwright_test]
    if: >
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      needs.playwright_test.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy to Production
        run: |
          npm i -g vercel@latest
          
          mkdir -p .vercel
          echo "{\"orgId\":\"${{ secrets.VERCEL_ORG_ID }}\",\"projectId\":\"${{ secrets.VERCEL_PROJECT_ID }}\"}" > .vercel/project.json
          
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} --yes